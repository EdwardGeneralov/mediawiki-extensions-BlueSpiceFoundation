<?php

namespace BlueSpice\Hooks;

abstract class LinkEnd extends Hook {

	/**
	 *
	 * @var \DummyLinker
	 */
	protected $dummy = null;

	/**
	 *
	 * @var \Title
	 */
	protected $target = null;

	/**
	 *
	 * @var array
	 */
	protected $options = [];

	/**
	 *
	 * @var string
	 */
	protected $html = '';

	/**
	 *
	 * @var array
	 */
	protected $attribs = [];

	/**
	 *
	 * @var string
	 */
	protected $ret  = '';

	/**
	 * Adds additional data to links generated by the framework. This allows us
	 * to add more functionality to the UI.
	 * @param \DummyLinker $dummy
	 * @param \Title $target
	 * @param array $options
	 * @param string $html
	 * @param array $attribs
	 * @param string $ret
	 * @return boolean Always true to keep hook running
	 */
	public static function callback( \DummyLinker $dummy, \Title $target, $options, &$html, &$attribs, &$ret  ) {
		$className = static::class;
		$hookHandler = new $className(
			null,
			null,
			$dummy,
			$target,
			$options,
			$html,
			$attribs,
			$ret
		);
		return $hookHandler->process();
	}

	/**
	 *
	 * @param \IContextSource $context
	 * @param \Config $config
	 * @param \DummyLinker $dummy
	 * @param \Title $target
	 * @param array $options
	 * @param string $html
	 * @param array $attribs
	 * @param string $ret
	 */
	public function __construct( $context, $config, \DummyLinker $dummy, \Title $target, $options, &$html, &$attribs, &$ret ) {
		parent::__construct( $context, $config );

		$this->dummy =& $dummy;
		$this->target = $target;
		$this->options = $options;
		$this->html =& $html;
		$this->attribs =& $attribs;
		$this->ret =& $ret;
	}
}